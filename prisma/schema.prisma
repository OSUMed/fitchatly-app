// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // Explicitly specify the target binary for Debian-based Linux (like node:18 image)
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Add your models here
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  username      String?         @unique
  password      String?
  role          String          @default("user")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  accounts      Account[]
  sessions      Session[]

  // Added relations for chat
  favorites     FavoriteChannel[]
  messages      Message[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Added Chat Models

model Channel {
  id        String   @id @default(cuid())
  name      String   @unique
  type      String   // 'public' or 'private'
  createdAt DateTime @default(now())

  messages  Message[]
  favoritedBy FavoriteChannel[] // Relation for favorites
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text // Use Text for potentially long messages
  userId    String
  channelId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade delete messages if user is deleted
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade) // Cascade delete messages if channel is deleted

  @@index([channelId, createdAt]) // Index for faster message fetching per channel
}

model FavoriteChannel {
  id        String   @id @default(cuid())
  userId    String
  channelId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade delete favorite if user is deleted
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade) // Cascade delete favorite if channel is deleted

  @@unique([userId, channelId]) // Ensure a user can only favorite a channel once
  @@index([userId]) // Index for faster favorite lookup per user
} 